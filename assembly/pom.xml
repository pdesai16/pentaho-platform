<?xml version="1.0" encoding="UTF-8"?>
<!--
   Apache Maven 2 POM generated by Apache Ivy
   http://ant.apache.org/ivy/
   Apache Ivy version: 2.4.0 20141213170938
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>pentaho</groupId>
    <artifactId>pentaho-platform-ce-parent</artifactId>
       <relativePath>../pom.xml</relativePath>
    <version>7.1-SNAPSHOT</version>
  </parent>

  <artifactId>pentaho-platform-assembly</artifactId>
  <packaging>pom</packaging>

  <properties>
    
    <package.id>pentaho-server</package.id>
    <target.dir>${project.build.directory}</target.dir> <!-- same as ${basedir}/target -->
    <target.pentaho-server.dir>${target.dir}/${package.id}</target.pentaho-server.dir> <!-- where the server will get assembled -->

    <target.pentaho-server.solutions.dir>${target.pentaho-server.dir}/pentaho-solutions</target.pentaho-server.solutions.dir>
    <target.pentaho-server.samples.dir>${target.pentaho-server.solutions.dir}/plugin-samples</target.pentaho-server.samples.dir>
    <target.pentaho-server.system.dir>${target.pentaho-server.solutions.dir}/system</target.pentaho-server.system.dir>
      
    <target.pentaho-server.plugins.dir>${target.pentaho-server.system.dir}</target.pentaho-server.plugins.dir> 
    <target.pentaho-server.kettle.plugins.dir>${target.pentaho-server.system.dir}/kettle/plugins</target.pentaho-server.kettle.plugins.dir> 

    <plugins.dir>plugins</plugins.dir>
    <lib.dir>${project.build.directory}/lib</lib.dir>

    <replacer.version>1.5.2</replacer.version>
    <tomcat.major.version>8</tomcat.major.version>
    <tomcat.minor.version>0.37</tomcat.minor.version>
    <tomcat.version>${tomcat.major.version}.${tomcat.minor.version}</tomcat.version>
	<tomcat.dir>${target.dir}/apache-tomcat-${tomcat.version}</tomcat.dir>
    <prep.pentaho.war.dir>${target.pentaho-server.dir}/tomcat/webapps/pentaho</prep.pentaho.war.dir>
	<prep.pentaho.war.lib.dir>${prep.pentaho.war.dir}/WEB-INF/lib</prep.pentaho.war.lib.dir>
	<container.lib.dir>${target.pentaho-server.dir}/tomcat/lib</container.lib.dir>
	<solution.archives.dir>${project.build.directory}/solution-archives</solution.archives.dir>
    <datasource.res.dir>${basedir}/package-res/appserver/tomcat/res/datasources</datasource.res.dir>
    <prep.pentaho.style.war.dir>${target.pentaho-server.dir}/tomcat/webapps/pentaho-style</prep.pentaho.style.war.dir>
    <!-- Default database for open assembly is hsqldb -->
    <rdbms>hsqldb</rdbms>

	<!-- the impl properties are used to create the manifest file -->
    <impl.title>Pentaho BI Platform Community Edition</impl.title>
    <impl.vendor>Pentaho Corporation</impl.vendor>
    <impl.version>${project.version}</impl.version>

    <axis.version>1.4</axis.version>
    <batik-bridge.version>1.7</batik-bridge.version>
    <bsf.version>2.4.0</bsf.version>
    <bsh.version>1.3.0</bsh.version>
    <commons-beanutils.version>1.8.0</commons-beanutils.version>
    <commons-cli.version>1.0</commons-cli.version>
    <rhino.js.version>1.7R1</rhino.js.version>
    <slf4j-log4j12.version>1.6.1</slf4j-log4j12.version>
    <wkhtmltoimage.version>0.10.0_rc2-static</wkhtmltoimage.version>
    <wkhtmltox.version>0.10.0_rc2</wkhtmltox.version>
    <wsdl4j.version>1.5.0</wsdl4j.version>
  </properties>
  <modules>

    <module>pentaho-server-manual</module>
    <module>pentaho-server</module>

    <!-- <module>assembly</module> -->

  </modules>

  <build>
    <plugins>
      <!-- [START] unpack platform-plugins, kettle-plugins and pentaho-samples 
        into the proper locations -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>2.10</version>
        <inherited>false</inherited>
        <executions>
          <execution>
            <id>unpack</id>
            <phase>package</phase>
            <goals>
              <goal>unpack</goal>
            </goals>

            <configuration>
              <artifactItems>

                <!-- [START] unpack platform-plugins into /pentaho-solutions/system -->
                <artifactItem>
                  <groupId>pentaho-kettle</groupId>
                  <artifactId>pdi-pur-plugin</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.plugins.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho</groupId>
                  <artifactId>pentaho-cdf</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.plugins.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho</groupId>
                  <artifactId>cgg</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.plugins.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho</groupId>
                  <artifactId>cda</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.plugins.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho</groupId>
                  <artifactId>pentaho-cdf-dd</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.plugins.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho</groupId>
                  <artifactId>sparkl</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.plugins.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho</groupId>
                  <artifactId>pentaho-jpivot-plugin</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.plugins.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho</groupId>
                  <artifactId>pentaho-karaf-assembly</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${project.build.directory}/temp</outputDirectory>
                  <classifier>server</classifier>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho</groupId>
                  <artifactId>common-ui</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.plugins.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho</groupId>
                  <artifactId>data-access-plugin</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.plugins.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho</groupId>
                  <artifactId>pentaho-pdi-platform-plugin-package</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.plugins.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho-reporting-engine</groupId>
                  <artifactId>pentaho-reporting-engine-classic-core-platform-plugin-package</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.plugins.dir}</outputDirectory>
                </artifactItem>
                <!-- [END] unpack platform-plugins into /pentaho-solutions/system -->

                <!-- [START] unpack kettle-plugins into /pentaho-solutions/system/kettle/plugins -->
                <artifactItem>
                  <groupId>pentaho</groupId>
                  <artifactId>pentaho-big-data-plugin</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.kettle.plugins.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho</groupId>
                  <artifactId>pentaho-cassandra-plugin</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.kettle.plugins.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho</groupId>
                  <artifactId>pentaho-cassandra-plugin</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.kettle.plugins.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho</groupId>
                  <artifactId>pdi-teradata-tpt-plugin-package</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.kettle.plugins.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho</groupId>
                  <artifactId>pdi-platform-utils-plugin</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.kettle.plugins.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho-kettle</groupId>
                  <artifactId>pdi-pur-plugin</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.kettle.plugins.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho-kettle</groupId>
                  <artifactId>kettle-json-plugin</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.kettle.plugins.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho-kettle</groupId>
                  <artifactId>kettle-xml-plugin</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.kettle.plugins.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho-kettle</groupId>
                  <artifactId>kettle-sap-plugin</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.kettle.plugins.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho-kettle</groupId>
                  <artifactId>pdi-google-analytics-plugin-ce</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.kettle.plugins.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho-kettle</groupId>
                  <artifactId>pdi-salesforce-plugin</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.kettle.plugins.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho</groupId>
                  <artifactId>VerticaBulkLoader</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.kettle.plugins.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho-kettle</groupId>
                  <artifactId>kettle-s3csvinput-plugin</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.kettle.plugins.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho-kettle</groupId>
                  <artifactId>kettle-hl7-plugin</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.kettle.plugins.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho-kettle</groupId>
                  <artifactId>gp-bulk-loader-plugin</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.kettle.plugins.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho-kettle</groupId>
                  <artifactId>kettle-gpload-plugin</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.kettle.plugins.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho-kettle</groupId>
                  <artifactId>elasticsearch-bulk-insert-plugin</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.kettle.plugins.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho-kettle</groupId>
                  <artifactId>kettle-openerp-plugin</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.kettle.plugins.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho-kettle</groupId>
                  <artifactId>kettle-palo-plugin</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.kettle.plugins.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho-kettle</groupId>
                  <artifactId>kettle-shapefilereader-plugin</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.kettle.plugins.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho-kettle</groupId>
                  <artifactId>lucid-db-streaming-loader-plugin</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.kettle.plugins.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho-kettle</groupId>
                  <artifactId>kettle-drools5-plugin</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.kettle.plugins.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho-kettle</groupId>
                  <artifactId>ms-access-bulk-loader-plugin</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.kettle.plugins.dir}</outputDirectory>
                </artifactItem>
                 <artifactItem>
                  <groupId>pentaho</groupId>
                  <artifactId>pentaho-big-data-plugin-samples</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.kettle.plugins.dir}</outputDirectory>
                </artifactItem>
                <!-- [END] unpack kettle-plugins into /pentaho-solutions/system/kettle/plugins -->

                <!-- [START] unpack pentaho-samples into /pentaho-solutions/plugin-samples -->
                <artifactItem>
                  <groupId>pentaho</groupId>
                  <artifactId>pentaho-cdf-samples</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.samples.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho</groupId>
                  <artifactId>cda-samples</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.samples.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>pentaho</groupId>
                  <artifactId>pentaho-cdf-dd-solution</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <outputDirectory>${target.pentaho-server.samples.dir}</outputDirectory>
                </artifactItem>
                <!-- [END] unpack pentaho-samples into /pentaho-solutions/plugin-samples -->
           

              </artifactItems>
              <overWriteReleases>false</overWriteReleases>
              <overWriteSnapshots>true</overWriteSnapshots>
            </configuration>
          </execution>
          <!-- [END] unpack platform-plugins, kettle-plugins and pentaho-samples 
            into the proper locations -->
          <!--  Downloading Tomcat -->  
          <execution>
            <id>unpack-tomcat</id>
            <phase>package</phase>
            <goals>
              <goal>unpack</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>org.apache.tomcat</groupId>
                  <artifactId>tomcat-windows-x64</artifactId>
                  <version>8.0.37</version>
                  <type>zip</type>
                  <overWrite>true</overWrite>
                  <outputDirectory>${target.dir}</outputDirectory>
                  <excludes>**/webapps/docs/**,**/webapps/examples/**,**/webapps/host-manager/**,**/webapps/manager/**,**/webapps/ROOT/**</excludes>
                </artifactItem>
                <!-- unpack user console zip -->
                <artifactItem>
                  <groupId>pentaho</groupId>
                  <artifactId>pentaho-user-console-package</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <overWrite>false</overWrite>
                  <outputDirectory>${prep.pentaho.war.dir}</outputDirectory>
                </artifactItem>
                <!-- OSS Licenses file -->
                <artifactItem>
                  <groupId>pentaho</groupId>
                  <artifactId>oss-licenses</artifactId>
                  <version>${project.version}</version>
                  <type>zip</type>
                  <overWrite>false</overWrite>
                  <outputDirectory>${target.pentaho-server.dir}/licenses</outputDirectory>
                  <includes>PentahoServer_OSS_Licenses.html</includes>
                </artifactItem>
                
              </artifactItems>
            </configuration>
          </execution>
          <!-- Datasource Libraries -->
          <execution>
            <id>copy-Datasource-libraries</id>
            <phase>package</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>commons-logging</groupId>
                  <artifactId>commons-logging</artifactId>
                  <version>${commons-logging.version}</version>
                  <overWrite>false</overWrite>
                  <outputDirectory>${container.lib.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>org.hsqldb</groupId>
                  <artifactId>hsqldb</artifactId>
                  <version>${hsqldb.version}</version>
                  <overWrite>false</overWrite>
                  <outputDirectory>${container.lib.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>mysql</groupId>
                  <artifactId>mysql-connector-java</artifactId>
                  <version>${mysql-connector-java.version}</version>
                  <overWrite>false</overWrite>
                  <outputDirectory>${container.lib.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>com.h2database</groupId>
                  <artifactId>h2</artifactId>
                  <version>${h2.version}</version>
                  <overWrite>false</overWrite>
                  <outputDirectory>${container.lib.dir}</outputDirectory>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
          <!-- Copy third party tools  wkhtmltoimage -->
          <execution>
            <id>copy-third-party-tools</id>
            <phase>package</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                   <groupId>wkhtmltopdf</groupId>
                   <artifactId>wkhtmltoimage-amd64</artifactId>
                  <version>${wkhtmltoimage.version}</version>
                  <type>tar.bz2</type>
                  <outputDirectory>${target.pentaho-server.dir}/third-party-tools/wkhtmltoimage</outputDirectory>
                </artifactItem>
                <artifactItem>
                 <groupId>wkhtmltopdf</groupId>
                 <artifactId>wkhtmltoimage-OSX</artifactId>
                 <version>${wkhtmltoimage.version}</version>
                 <type>tar.bz2</type>
                  <outputDirectory>${target.pentaho-server.dir}/third-party-tools/wkhtmltoimage</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>wkhtmltopdf</groupId>
                  <artifactId>wkhtmltoimage-i386</artifactId>
                  <version>${wkhtmltoimage.version}</version>
                  <type>tar.bz2</type>
                  <outputDirectory>${target.pentaho-server.dir}/third-party-tools/wkhtmltoimage</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>wkhtmltopdf</groupId>
                  <artifactId>wkhtmltox</artifactId>
                  <version>${wkhtmltox.version}</version>
                  <classifier>installer</classifier>
                  <type>exe</type>
                  <outputDirectory>${target.pentaho-server.dir}/third-party-tools/wkhtmltoimage</outputDirectory>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
          <!-- Copy the dependency into lib folder -->
          <execution>
            <id>copy-dependencies</id>
            <phase>package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/lib</outputDirectory>
            </configuration>
          </execution>
          <!-- Copying to tomcat/lib -->
          <execution>
            <id>copy-tomcat-libs</id>
            <phase>package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>${target.pentaho-server.dir}/tomcat/lib</outputDirectory>
              <includeArtifactIds>jsp-api,postgresql</includeArtifactIds>
            </configuration>
          </execution>
          <!-- Copying to tomcat/server/lib -->
          <execution>
            <id>copy-tomcat-server-libs</id>
            <phase>package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>${target.pentaho-server.dir}/tomcat/server/lib</outputDirectory>
              <includeArtifactIds>cglib-nodep,jaxen</includeArtifactIds>
            </configuration>
          </execution>
        </executions>
      </plugin>

    <plugin>
      <artifactId>maven-resources-plugin</artifactId>
      <version>3.0.1</version>
      <inherited>false</inherited>
      <executions>
        <!-- Copy content of tomcat to pentaho-server dir -->
        <execution>
          <id>copy-tomcat</id>
          <phase>package</phase>
          <goals>
            <goal>copy-resources</goal>
          </goals>
          <configuration>
            <outputDirectory>${target.pentaho-server.dir}/tomcat</outputDirectory>
            <overwrite>true</overwrite>
            <resources>
              <resource>
                <directory>${tomcat.dir}</directory>
              </resource>
            </resources>
          </configuration>
        </execution>
        <!-- [START] copy package-res and package-res-merged-server configuration
        files into assembly/target/pentaho-server -->
        <execution>
          <id>assemble-pentaho-webapp</id>
          <phase>package</phase>
          <goals>
            <goal>copy-resources</goal>
          </goals>
          <configuration>
            <outputDirectory>${target.pentaho-server.dir}</outputDirectory>
            <overwrite>true</overwrite>
            <resources>
              <resource>
                 <!--  Copy from package-res/biserver -->
                <directory>${basedir}/package-res/biserver</directory>
                <excludes>
                  <exclude>**/WEB-INF/default-object.xml</exclude>
                  <exclude>**/WEB-INF/jboss-app.xml</exclude>
                  <exclude>**/WEB-INF/jboss-portlet.xml</exclude>
                  <exclude>**/WEB-INF/jboss-web.xml</exclude>
                  <exclude>**/WEB-INF/portlet-instances.xml</exclude>
                </excludes>
              </resource>
              <resource>
                 <!--  Copy from package-res-merged-server/biserver -->
                <directory>${basedir}/package-res-merged-server/biserver</directory>
  
              </resource>

            </resources>
          </configuration>
        </execution>
        <!-- [END] copy package-res and package-res-merged-server configuration
        files into assembly/target/pentaho-server -->

        <execution>
          <id>prepare-war-lib-dir</id>
          <phase>package</phase>
          <goals>
            <goal>copy-resources</goal>
          </goals>
          <configuration>
            <outputDirectory>${prep.pentaho.war.lib.dir}</outputDirectory>
            <resources>
              <resource>
                <directory>${lib.dir}</directory>
                <excludes>
                  <exclude>*servlet-api-*.jar</exclude>
                  <exclude>gwt-user-*.jar</exclude>
                  <exclude>mysql-connector-*.jar</exclude>
                  <exclude>postgres*.jar</exclude>
                  <exclude>jtds-*.jar</exclude>
                  <exclude>h2-*.jar</exclude>
                  <exclude>hsqldb-*.jar</exclude>
                  <exclude>*-sources.jar</exclude>
                  <!-- TODO: Remove the line below when we fix the circular
                    dependency between kettle-engine and metadata -->
                  <exclude>hibernate-3.2.6.ga.jar</exclude>
                </excludes>
              </resource>
            </resources>
          </configuration>
        </execution>
        <!--  Copy context.xml to target/resources -->
        <execution>
          <id>copy-rdbms-context</id>
          <phase>package</phase>
          <goals>
            <goal>copy-resources</goal>
          </goals>
          <configuration>
            <outputDirectory>${target.dir}/resources/META-INF</outputDirectory>
            <overwrite>true</overwrite>
            <resources>
              <resource>
                <directory>${datasource.res.dir}/${rdbms}</directory>
                <include>**/context.xml</include>
              </resource>
            </resources>
          </configuration>
          </execution>
      </executions>
    </plugin>

    <!--  Creating manifest file -->
    <plugin>
      <artifactId>maven-antrun-plugin</artifactId>
      <executions>
        <execution>
          <phase>package</phase>
          <configuration>
            <target>
              <!-- Add manifest -->
              <mkdir dir="${prep.pentaho.war.dir}/META-INF" />
              <manifest file="${prep.pentaho.war.dir}/META-INF/MANIFEST.MF">
                <attribute name="Implementation-Title" value="${impl.title}" />
                <attribute name="Implementation-Version" value="${project.version}" />
                <attribute name="Implementation-Vendor" value="${impl.vendor}" />
              </manifest>
            </target>
          </configuration>
          <goals>
            <goal>run</goal>
          </goals>
        </execution>
      </executions>
    </plugin>


    <!--  Creating pentaho war -->
    <plugin>
      <artifactId>maven-war-plugin</artifactId>
      <version>2.6</version>
      <inherited>false</inherited>
      <executions>
        <execution>
            <id>pentaho-war</id>
            <phase>package</phase>
            <goals>
               <goal>war</goal>
            </goals>
            <configuration>
               <webResources>
                  <resource>
                    <directory>${target.dir}/resources</directory>
                    <includes>
                      <include>**/context.xml</include>
                    </includes>
                  </resource>
                </webResources>
                <archive>
                  <addMavenDescriptor>false</addMavenDescriptor>
                  <manifestFile>${prep.pentaho.war.dir}/META-INF/MANIFEST.MF</manifestFile>
                </archive>
                <warName>pentaho</warName>
                <webXml>${prep.pentaho.war.dir}/WEB-INF/web.xml</webXml>
                <webappDirectory>${prep.pentaho.war.dir}</webappDirectory>
                <outputDirectory>${target.dir}</outputDirectory>
              </configuration>
           </execution>
           <!--  Creating pentahostyle war -->
           <execution>
            <id>pentaho-style-war</id>
            <phase>package</phase>
            <goals>
               <goal>war</goal>
            </goals>
            <configuration>
                <archive>
                  <addMavenDescriptor>false</addMavenDescriptor>
                </archive>
                <warName>pentaho-style</warName>
                <webXml>${prep.pentaho.style.war.dir}/WEB-INF/web.xml</webXml>
                <webappDirectory>${prep.pentaho.style.war.dir}</webappDirectory>
                <outputDirectory>${target.dir}</outputDirectory>
              </configuration>
           </execution>
         </executions>
    </plugin>

      <plugin>
        <groupId>com.google.code.maven-replacer-plugin</groupId>
        <artifactId>replacer</artifactId>
        <version>${replacer.version}</version>
        <inherited>false</inherited>
        <executions>
        <!-- modify tomcat/conf/server.xml for UTF-8 support -->
          <execution>
            <id>replace-tomcat-tokens-server-xml</id>
            <phase>package</phase>
            <goals>
              <goal>replace</goal>
            </goals>
            <configuration>
              <file>${target.pentaho-server.dir}/tomcat/conf/server.xml</file>
              <token>&lt;Connector</token>
              <value>&lt;Connector URIEncoding=&quot;UTF-8&quot;</value>
            </configuration>
          </execution>
          <!-- modify the tomcat/conf/context.xml to disable session persistence between restarts -->
          <execution>
            <id>replace-tomcat-regex-context-xml</id>
            <phase>package</phase>
            <goals>
              <goal>replace</goal>
            </goals>
            <configuration>
              <file>${target.pentaho-server.dir}/tomcat/conf/context.xml</file>
              <token>\&lt;!--[ \r\n\t]*(\&lt;Manager[ ]*pathname=.*)[ \r\n\t]*--\&gt;</token>
              <value>\1</value>
            </configuration>
          </execution>
        </executions>
      </plugin>
     
    </plugins>
  </build>

  <dependencies>
    <!-- Pentaho -->
    <dependency>
      <groupId>pentaho</groupId>
      <artifactId>pentaho-platform-extensions</artifactId>
      <version>${project.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>org.apache.xbean</groupId>
          <artifactId>xbean</artifactId>
        </exclusion>
        <exclusion>
          <groupId>pentaho-reporting-engine</groupId>
          <artifactId>pentaho-reporting-engine-classic-core-test</artifactId>
        </exclusion>
        <exclusion>
        	<groupId>javax.servlet</groupId>
        	<artifactId>servlet-api</artifactId>
        </exclusion>
        <exclusion>
        	<groupId>javax.servlet</groupId>
        	<artifactId>javax.servlet-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- Pentaho commons -->
    <dependency>
      <groupId>pentaho</groupId>
      <artifactId>pentaho-database-model</artifactId>
      <version>${project.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!--  Reporting -->
    <!-- NOTE: this reporting plugin jar will be removed once the reporting plugin is 3.5 plugin compliant -->
    
    <dependency>
      <groupId>pentaho-reporting-engine</groupId>
      <artifactId>pentaho-reporting-engine-classic-core-platform-plugin</artifactId>
      <version>${project.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>pentaho-reporting-engine</groupId>
          <artifactId>pentaho-reporting-engine-classic-core-test</artifactId>
        </exclusion>
        <exclusion>
          <groupId>pentaho</groupId>
          <artifactId>pentaho-platform-extensions</artifactId>
        </exclusion>
        <exclusion>
          <groupId>pentaho</groupId>
          <artifactId>pentaho-platform-api</artifactId>
        </exclusion>
        <exclusion>
          <groupId>pentaho</groupId>
          <artifactId>pentaho-platform-core</artifactId>
        </exclusion>
        <exclusion>
          <groupId>pentaho</groupId>
          <artifactId>pentaho-platform-scheduler</artifactId>
        </exclusion>
        <exclusion>
          <groupId>pentaho</groupId>
          <artifactId>pentaho-platform-repository</artifactId>
        </exclusion>
        <exclusion>
        	<groupId>javax.servlet</groupId>
        	<artifactId>servlet-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    
    <dependency>
      <groupId>pentaho-reporting-engine</groupId>
      <artifactId>pentaho-reporting-engine-classic-core</artifactId>
      <version>${project.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>pentaho-reporting-engine</groupId>
          <artifactId>pentaho-reporting-engine-classic-core-test</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>pentaho-reporting-engine</groupId>
      <artifactId>pentaho-reporting-engine-classic-extensions</artifactId>
      <version>${project.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>pentaho-reporting-engine</groupId>
          <artifactId>pentaho-reporting-engine-classic-core-test</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>pentaho-library</groupId>
      <artifactId>libserializer</artifactId>
      <version>${project.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
  
    <!-- Miscellaneous -->
    <dependency>
      <groupId>org.owasp.esapi</groupId>
      <artifactId>esapi</artifactId>
      <version>${esapi.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.axis</groupId>
      <artifactId>axis</artifactId>
      <version>${axis.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.xmlgraphics</groupId>
      <artifactId>batik-bridge</artifactId>
      <version>${batik.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>bsf</groupId>
      <artifactId>bsf</artifactId>
      <version>${bsf.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.netbeans</groupId>
      <artifactId>mdrjdbc</artifactId>
      <version>${mdrjdbc.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.beanshell</groupId>
      <artifactId>bsh</artifactId>
      <version>${bsh.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>ognl</groupId>
      <artifactId>ognl</artifactId>
      <version>${ognl.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>com.ibm.icu</groupId>
      <artifactId>icu4j</artifactId>
      <version>${icu4j.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>com.ibm.icu</groupId>
      <artifactId>icu4j-charset</artifactId>
      <version>${icu4j.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>pentaho</groupId>
      <artifactId>pentaho-capability-manager</artifactId>
      <version>${project.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
      <version>${commons-logging.version}</version>
      <scope>compile</scope>
    </dependency>
        
   
    <!-- Metro -->
    <dependency>
      <groupId>org.glassfish.metro</groupId>
      <artifactId>webservices-api</artifactId>
      <version>${webservices.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.glassfish.metro</groupId>
      <artifactId>webservices-rt</artifactId>
      <version>${webservices.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- Commons -->
    <dependency>
      <groupId>commons-beanutils</groupId>
      <artifactId>commons-beanutils</artifactId>
      <version>${commons-beanutils.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>commons-cli</groupId>
      <artifactId>commons-cli</artifactId>
      <version>${commons-cli.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>commons-digester</groupId>
      <artifactId>commons-digester</artifactId>
      <version>${commons-digester.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>commons-discovery</groupId>
      <artifactId>commons-discovery</artifactId>
      <version>${commons-discovery.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>commons-jxpath</groupId>
      <artifactId>commons-jxpath</artifactId>
      <version>${commons-jxpath.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>jakarta-regexp</groupId>
      <artifactId>jakarta-regexp</artifactId>
      <version>${jakarta-regexp.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>javax.xml</groupId>
      <artifactId>jaxrpc-api</artifactId>
      <version>${jaxrpc-api.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>jcommon-logging-log4jlog</groupId>
      <artifactId>jcommon-logging-log4jlog</artifactId>
      <version>${jcommon-logging-log4jlog.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>joda-time</groupId>
      <artifactId>joda-time</artifactId>
      <version>${joda-time.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>commons-math</groupId>
      <artifactId>commons-math</artifactId>
      <version>${commons-math.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
      <version>${slf4j-log4j12.version}</version>
      <scope>compile</scope>
    </dependency>
    
    
    <!-- Saxon -->
    <dependency>
      <groupId>net.sourceforge.saxon</groupId>
      <artifactId>saxon</artifactId>
      <version>${saxon.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>net.sf.saxon</groupId>
      <artifactId>saxon-dom</artifactId>
      <version>${saxon.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>net.sf.saxon</groupId>
      <artifactId>saxon-jdom</artifactId>
      <version>${saxon.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>net.sf.saxon</groupId>
      <artifactId>saxon-sql</artifactId>
      <version>${saxon.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>net.sf.saxon</groupId>
      <artifactId>saxon-xom</artifactId>
      <version>${saxon.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>rhino</groupId>
      <artifactId>js</artifactId>
      <version>${rhino.js.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>soap</groupId>
      <artifactId>soap</artifactId>
      <version>${soap.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>wsdl4j</groupId>
      <artifactId>wsdl4j</artifactId>
      <version>${wsdl4j.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.quartz-scheduler</groupId>
      <artifactId>quartz-oracle</artifactId>
      <version>${quartz-oracle.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>pentaho</groupId>
      <artifactId>pdi-osgi-bridge-core</artifactId>
      <version>${project.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>pentaho</groupId>
      <artifactId>pentaho-osgi-utils-api</artifactId>
      <version>${project.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>pentaho</groupId>
      <artifactId>pentaho-metaverse-api</artifactId>
      <version>${project.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>pentaho-kettle</groupId>
      <artifactId>pdi-pur-plugin</artifactId>
      <version>${project.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    
    <!-- Karaf dependencies -->
    <dependency>
      <groupId>org.apache.karaf</groupId>
      <artifactId>org.apache.karaf.main</artifactId>
      <version>${org.apache.karaf.main.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.karaf.management</groupId>
      <artifactId>org.apache.karaf.management.boot</artifactId>
      <version>${org.apache.karaf.management.boot.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.karaf.jaas</groupId>
      <artifactId>org.apache.karaf.jaas.boot</artifactId>
      <version>${org.apache.karaf.jaas.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.karaf.jaas</groupId>
      <artifactId>org.apache.karaf.jaas.modules</artifactId>
      <version>${org.apache.karaf.jaas.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.felix</groupId>
      <artifactId>org.apache.felix.main</artifactId>
      <version>${org.apache.felix.main.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.felix</groupId>
      <artifactId>org.apache.felix.http.api</artifactId>
      <version>${org.apache.felix.http.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.felix</groupId>
      <artifactId>org.apache.felix.http.base</artifactId>
      <version>${org.apache.felix.http.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.felix</groupId>
      <artifactId>org.apache.felix.http.proxy</artifactId>
      <version>${org.apache.felix.http.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.felix</groupId>
      <artifactId>org.apache.felix.fileinstall</artifactId>
      <version>${org.apache.felix.fileinstall.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.felix</groupId>
      <artifactId>org.apache.felix.framework</artifactId>
      <version>${org.apache.felix.framework.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.osgi</groupId>
      <artifactId>org.osgi.compendium</artifactId>
      <version>${org.osgi.compendium.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>pentaho</groupId>
      <artifactId>pentaho-proxy-factory</artifactId>
      <version>${project.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>pentaho.weka</groupId>
      <artifactId>pdm-ce</artifactId>
      <version>${weka.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- Tomcat -->
    <dependency>
      <groupId>org.apache.tomcat</groupId>
      <artifactId>tomcat</artifactId>
      <version>${tomcat.version}</version>
      <type>zip</type>
    </dependency>
    
    <!-- Tomcat dependencies -->
    <dependency>
      <groupId>cglib</groupId>
      <artifactId>cglib-nodep</artifactId>
      <version>${cglib.version}</version>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>jaxen</groupId>
      <artifactId>jaxen</artifactId>
      <version>${jaxen.version}</version>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>javax.servlet.jsp</groupId>
      <artifactId>jsp-api</artifactId>
      <version>${jsp-api.version}</version>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <version>${postgresql.version}</version>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
  </dependencies>
</project>
